"use strict";
class FairSocket {
    stompClient;
    userData = new UserData();
    state = Vue.reactive({
        connected: false,
        connectionRequested: false,
    });
    constructor() {
        this.stompClient = StompJs.Stomp.over(() => new SockJS('https://fair.kaliburg.de/fairsocket'));
        for (let k of [
            'onChangeState',
            'onConnect',
            'onDisconnect',
            'onStompError',
            'onUnhandledFrame',
            'onUnhandledMessage',
            'onUnhandledReceipt',
            'onWebSocketClose',
            'onWebSocketError',
        ]) {
            // just logging everything
            this.stompClient[k] = (...a) => {
                console.warn(k, ...a);
                this[k]?.(...a);
            };
        }
        window.addEventListener('onbeforeunload', () => this.disconnect());
    }
    _resolveOnConnected = [];
    connect() {
        this.state.connectionRequested = true;
        return new Promise(resolve => {
            if (this.stompClient.connected) {
                resolve();
            }
            else {
                this._resolveOnConnected.push(resolve);
                this.stompClient.connect({}, this.stompClient.onConnect);
            }
        });
    }
    disconnect() {
        this.stompClient.disconnect();
    }
    onConnect() {
        this.state.connectionRequested = false;
        this.state.connected = true;
        this._resolveOnConnected.map(e => e());
    }
    send(destination, data, number) {
        if (destination.includes('$')) {
            if (number == undefined)
                throw new Error('bad usage');
            destination = `${destination.split('$')[0]}${number}`;
        }
        else {
            if (number != undefined)
                throw new Error('bad usage');
        }
        this.stompClient.send(destination, {}, JSON.stringify(data));
    }
    subscribe(destination, listener, request, number) {
        if (destination.includes('$')) {
            if (number == undefined)
                throw new Error('bad usage');
            destination = `${destination.split('$')[0]}${number}`;
        }
        else {
            if (number != undefined)
                throw new Error('bad usage');
        }
        return this.stompClient.subscribe(destination, (message) => {
            let data = JSON.parse(message.body || 'null');
            console.warn(destination, data, message);
            listener(data);
        }, request);
    }
}
//# sourceMappingURL=data:application/json;base64,