"use strict";
class FairSocket {
    stompClient;
    userData = new UserData();
    state = Vue.reactive({
        connected: false,
        connectionRequested: false,
    });
    constructor() {
        this.stompClient = StompJs.Stomp.over(() => new SockJS('https://fair.kaliburg.de/fairsocket'));
        if (!localStorage.getItem('stompClient.debug')) {
            this.stompClient.debug = () => { };
        }
        for (let k of [
            'onChangeState',
            'onConnect',
            'onDisconnect',
            'onStompError',
            'onUnhandledFrame',
            'onUnhandledMessage',
            'onUnhandledReceipt',
            'onWebSocketClose',
            'onWebSocketError',
        ]) {
            // just logging everything
            this.stompClient[k] = (...a) => {
                if (localStorage.getItem('stompClient.debug.events'))
                    console.warn(k, ...a);
                this[k]?.(...a);
            };
        }
        window.addEventListener('onbeforeunload', () => this.disconnect());
    }
    _resolveOnConnected = [];
    async connect() {
        this.state.connectionRequested = true;
        await new Promise(resolve => {
            if (this.stompClient.connected) {
                resolve();
            }
            else {
                this._resolveOnConnected.push(resolve);
                this.stompClient.connect({}, this.stompClient.onConnect);
            }
        });
        let _resolve;
        this.subscribe('/user/queue/account/login', (data) => {
            if (data.status != 'OK') {
                alert('Failed to login!');
                throw 0;
            }
            console.log('login succeed!', data.content);
            this.userData.chatNum = data.content.highestCurrentLadder;
            this.userData.ladderNum = data.content.highestCurrentLadder;
            antd.message.success(`Highest ladder: #${data.content.highestCurrentLadder}`, 10);
            antd.message.success(`Connected to server as user#${data.content.accountId}`, 10);
            _resolve();
        }, { uuid: this.userData.uuid });
        await new Promise(resolve => {
            _resolve = resolve;
            this.send('/app/account/login', { uuid: this.userData.uuid });
        });
    }
    disconnect() {
        this.stompClient.disconnect();
        this.state.connectionRequested = false;
        this.state.connected = false;
    }
    onConnect() {
        this.state.connectionRequested = false;
        this.state.connected = true;
        this._resolveOnConnected.map(e => e());
        this._resolveOnConnected = [];
    }
    send(destination, data, number) {
        if (destination.includes('$')) {
            if (number == undefined)
                throw new Error('bad usage');
            destination = `${destination.split('$')[0]}${number}`;
        }
        else {
            if (number != undefined)
                throw new Error('bad usage');
        }
        if (localStorage.getItem('stompClient.debug.send'))
            console.warn('Send', destination, data);
        this.stompClient.send(destination, {}, JSON.stringify(data));
    }
    subscribe(destination, listener, request, number) {
        if (destination.includes('$')) {
            if (number == undefined)
                throw new Error('bad usage');
            destination = `${destination.split('$')[0]}${number}`;
        }
        else {
            if (number != undefined)
                throw new Error('bad usage');
        }
        if (localStorage.getItem('stompClient.debug.subscribe'))
            console.warn('Subscribed to', destination);
        return this.stompClient.subscribe(destination, (message) => {
            let data = JSON.parse(message.body || 'null');
            if (localStorage.getItem('stompClient.debug.subscribe.event'))
                console.warn(destination, data, message);
            listener(data);
        }, request);
    }
}
//# sourceMappingURL=data:application/json;base64,